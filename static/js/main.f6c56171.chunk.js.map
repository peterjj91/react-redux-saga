{"version":3,"sources":["redux/actions.js","redux/types.js","components/Alert.js","components/PostForm.js","components/Post.js","components/Posts.js","components/Loader.js","components/FetchedPosts.js","App.js","serviceWorker.js","redux/postsReducer.js","redux/appReducer.js","redux/rootReducer.js","redux/middleware.js","redux/sagas.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","className","role","PostForm","alert","useSelector","state","app","useState","title","setTitle","useDispatch","onSubmit","event","preventDefault","trim","newPostId","Date","now","toString","id","htmlFor","value","name","onChange","target","post","Posts","syncPosts","posts","length","map","Post","key","Loader","fetchedPosts","loading","onClick","App","FetchedPosts","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","concat","forbidden","sagaWatcher","sagaWorker","takeEvery","put","call","fetchPosts","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","next","filter","w","includes","__REDUX_DEVTOOLS_EXTENSION__","run","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6c56171.chunk.js","sourcesContent":["import {\n  CREATE_POST,\n  HIDE_ALERT,\n  HIDE_LOADER,\n  REQUEST_POSTS,\n  SHOW_ALERT,\n  SHOW_LOADER,\n} from \"./types\";\n\nexport function createPost(post) {\n  return {\n    type: CREATE_POST,\n    payload: post,\n  };\n}\n\nexport function showLoader() {\n  return {\n    type: SHOW_LOADER,\n  };\n}\n\nexport function hideLoader() {\n  return {\n    type: HIDE_LOADER,\n  };\n}\n\nexport function showAlert(text) {\n  return (dispatch) => {\n    dispatch({\n      type: SHOW_ALERT,\n      payload: text,\n    });\n\n    setTimeout(() => {\n      dispatch(hideAlert());\n    }, 3000);\n  };\n}\n\nexport function hideAlert() {\n  return {\n    type: HIDE_ALERT,\n  };\n}\n\nexport function fetchPosts() {\n  return {\n    type: REQUEST_POSTS,\n  };\n}\n","export const CREATE_POST = \"POST/CREATE_POST\";\nexport const FETCH_POSTS = \"POST/FETCH_POSTS\";\nexport const REQUEST_POSTS = \"POST/REQUEST_POSTS\";\nexport const SHOW_LOADER = \"APP/SHOW_LOADER\";\nexport const HIDE_LOADER = \"APP/HIDE_LOADER\";\nexport const SHOW_ALERT = \"APP/SHOW_ALERT\";\nexport const HIDE_ALERT = \"APP/HIDE_ALERT\";\n","import React from \"react\";\n\nexport const Alert = ({ text }) => (\n  <div className=\"alert alert-warning\" role=\"alert\">\n    {text}\n  </div>\n);\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createPost, showAlert } from \"../redux/actions\";\nimport { Alert } from \"./Alert\";\n\nconst PostForm = () => {\n  const alert = useSelector((state) => state.app.alert);\n  const [title, setTitle] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      return dispatch(showAlert(\"Название поста не может быть пустым\"));\n    }\n\n    const newPostId = Date.now().toString();\n    const newPost = { title, id: newPostId };\n\n    dispatch(createPost(newPost));\n    setTitle(\"\");\n  };\n\n  const changeInputHandler = (event) => {\n    const { value } = event.target;\n    setTitle(value);\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      {alert && <Alert text={alert} />}\n\n      <div className=\"form-group\">\n        <label htmlFor=\"title\">Заголовок поста</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"title\"\n          value={title}\n          name=\"title\"\n          onChange={changeInputHandler}\n        />\n      </div>\n      <button className=\"btn btn-success\" type=\"submit\">\n        Создать\n      </button>\n    </form>\n  );\n};\n\nexport default PostForm;\n","import React from \"react\";\n\nexport default ({ post }) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{post.title}</h5>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Post from \"./Post\";\n\nconst Posts = () => {\n  const syncPosts = useSelector((state) => state.posts.posts);\n\n  if (!syncPosts.length) {\n    return <p className=\"text-center\">Постов пока нет</p>;\n  }\n  return syncPosts.map((post) => <Post post={post} key={post.id} />);\n};\n\nexport default Posts;\n","import React from \"react\";\n\nexport const Loader = () => (\n  <div className=\"spinner-border text-danger\" role=\"status\">\n    <span className=\"sr-only\">Loading...</span>\n  </div>\n);\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Post from \"./Post\";\nimport { fetchPosts } from \"../redux/actions\";\nimport { Loader } from \"./Loader\";\n\nexport default () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state) => state.posts.fetchedPosts);\n  const loading = useSelector((state) => state.app.loading);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (!posts.length) {\n    return (\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => dispatch(fetchPosts())}\n      >\n        Загрузить\n      </button>\n    );\n  }\n\n  return posts.map((post) => <Post post={post} key={post.id} />);\n};\n","import React from \"react\";\nimport PostForm from \"./components/PostForm\";\nimport Posts from \"./components/Posts\";\nimport FetchedPosts from \"./components/FetchedPosts\";\n\nfunction App() {\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Синхронные Посты</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>Асинхронные посты</h2>\n          <FetchedPosts />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are sconsidered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE_POST, FETCH_POSTS } from \"./types\";\n\nconst initialState = {\n  posts: [],\n  fetchedPosts: [],\n};\n\n// Pure Functions\nexport const postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CREATE_POST:\n      return { ...state, posts: state.posts.concat([action.payload]) };\n    case FETCH_POSTS:\n      return { ...state, fetchedPosts: action.payload };\n    default:\n      return state;\n  }\n};\n","import { HIDE_ALERT, HIDE_LOADER, SHOW_ALERT, SHOW_LOADER } from \"./types\";\n\nconst initialState = {\n  loading: false,\n  alert: null,\n};\n\nexport const appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SHOW_LOADER:\n      return { ...state, loading: true };\n    case HIDE_LOADER:\n      return { ...state, loading: false };\n    case SHOW_ALERT:\n      return { ...state, alert: action.payload };\n    case HIDE_ALERT:\n      return { ...state, alert: null };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { postsReducer } from \"./postsReducer\";\nimport { appReducer } from \"./appReducer\";\n\nexport const rootReducer = combineReducers({\n  posts: postsReducer,\n  app: appReducer,\n});\n","import { CREATE_POST } from \"./types\";\nimport { showAlert } from \"./actions\";\n\nconst forbidden = [\"fuck\", \"spam\", \"php\"];\n\nexport function forbiddenWordsMiddleware({ dispatch }) {\n  return function (next) {\n    return function (action) {\n      if (action.type === CREATE_POST) {\n        const found = forbidden.filter((w) => action.payload.title.includes(w));\n        if (found.length) {\n          return dispatch(showAlert(\"Вы спамер. Мы вас не звали, идите домой\"));\n        }\n      }\n      return next(action);\n    };\n  };\n}\n","import { takeEvery, put, call } from \"redux-saga/effects\";\nimport { FETCH_POSTS, REQUEST_POSTS } from \"./types\";\nimport { hideLoader, showAlert, showLoader } from \"./actions\";\n\nexport function* sagaWatcher() {\n  yield takeEvery(REQUEST_POSTS, sagaWorker);\n}\n\nfunction* sagaWorker() {\n  try {\n    yield put(showLoader());\n    const fetchedPosts = yield call(fetchPosts);\n    yield put({ type: FETCH_POSTS, payload: fetchedPosts });\n    yield put(hideLoader());\n  } catch (e) {\n    yield put(showAlert(\"Что-то пошло не так\"));\n    yield put(hideLoader());\n  }\n}\n\nasync function fetchPosts() {\n  const response = await fetch(\n    \"https://jsonplaceholder.typicode.com/posts?_limit=5\"\n  );\n  return await response.json();\n}\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { compose, createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport createSagaMiddleware from \"redux-saga\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { rootReducer } from \"./redux/rootReducer\";\nimport { forbiddenWordsMiddleware } from \"./redux/middleware\";\nimport { sagaWatcher } from \"./redux/sagas\";\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk, forbiddenWordsMiddleware, saga),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nsaga.run(sagaWatcher);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nrender(app, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}